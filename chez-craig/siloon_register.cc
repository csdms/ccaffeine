// This file is automatically generated

#include "siloon.h"
#include "Prototype.h"
#include "siloon_includes.h"

void Siloon::registerFunctions(PrototypeMap& pMap)
{
  //
  // Register C++ functions
  //

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Type arg1(0x80, 32, 0, 0, 0);
    arg1.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg1 );
    Type arg2(0x80, 128, 0, 0, 0);
    arg2.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( arg2 );
    Prototype proto("gov::cca::PortInfo *gov::cca::Services::createPortInfo(char *, char *, char **)", 4, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("gov::cca::Port *gov::cca::Services::getPort(char *)", 5, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("gov::cca::StringList *gov::cca::BuilderService::getComponentClasses()", 6, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Type arg1(0x80, 32, 0, 0, 0);
    arg1.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg1 );
    Prototype proto("gov::cca::ComponentID *gov::cca::BuilderService::createInstance(char *, char *)", 7, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 32, 0, 0, 0);
    rtn.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x20, 6, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("char *gov::cca::StringList::get(int)", 9, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("gov::cca::ComponentID *gov::cca::BuilderService::getComponentID(char *)", 10, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("gov::cca::StringList *gov::cca::BuilderService::getProvidesPortStrings(gov::cca::ComponentID *)", 11, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("int gov::cca::Services::registerUsesPort(gov::cca::PortInfo *)", 12, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("int gov::cca::StringList::getSize()", 15, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 32, 0, 0, 0);
    rtn.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("char *gov::cca::ComponentID::toString()", 16, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("gov::cca::StringList *gov::cca::BuilderService::getComponentInstanceNames()", 17, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("gov::cca::StringList *gov::cca::BuilderService::getUsesPortStrings(gov::cca::ComponentID *)", 18, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Type arg1(0x80, 32, 0, 0, 0);
    arg1.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg1 );
    Type arg2(0x80, 0, 112, 0, 0);
    arg2.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg2 );
    Type arg3(0x80, 32, 0, 0, 0);
    arg3.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg3 );
    Type arg4(0x80, 32, 0, 0, 0);
    arg4.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg4 );
    Prototype proto("void gov::cca::BuilderService::connect(gov::cca::ComponentID *, char *, gov::cca::ComponentID *, char *, char *)", 19, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Type arg1(0x80, 32, 0, 0, 0);
    arg1.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg1 );
    Prototype proto("void gov::cca::BuilderService::go(gov::cca::ComponentID *, char *)", 20, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 32, 0, 0, 0);
    rtn.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x20, 6, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("char *jcpp::StringVector::get(int)", 257, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("jcpp::StringVector *ComponentFactory::getPallet()", 880, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 128, 0, 0, 0);
    arg0.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("void ComponentFactory::setComponentPath(char **)", 882, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 128, 0, 0, 0);
    rtn.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("char **ComponentFactory::getComponentPath()", 883, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("int ComponentFactory::searchComponentPath()", 884, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 128, 0, 0, 0);
    rtn.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("char **ComponentFactory::getLoadedComponents()", 885, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 128, 0, 0, 0);
    rtn.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("char **ComponentFactory::getUnloadedComponents()", 886, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 128, 0, 0, 0);
    rtn.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("char **ComponentFactory::getLoadedLibraries()", 887, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Type arg1(0x20, 1, 0, 0, 0);
    types.push_back( arg1 );
    Type arg2(0x20, 1, 0, 0, 0);
    types.push_back( arg2 );
    Prototype proto("int ComponentFactory::loadPallet(char *, char, char)", 888, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("jcpp::StringVector *ConnectionFramework::getComponentClasses()", 908, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 128, 0, 0, 0);
    rtn.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x100, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 6, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("char **BuilderModel::getPallet(int &)", 938, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Type arg1(0x80, 32, 0, 0, 0);
    arg1.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg1 );
    Type arg2(0x80, 128, 0, 0, 0);
    arg2.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( arg2 );
    Prototype proto("gov::cca::Services *CcaffeineAbstractFramework::getBootstrapServices(char *, char *, char **)", 978, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("void CcaffeineAbstractFramework::releaseBootstrapServices(gov::cca::Services *)", 979, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x100, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("CcaffeineAbstractFramework &CcaffeineAbstractFramework::CcaffeineAbstractFramework(gov::cca::StringList *)", 984, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 32, 0, 0, 0);
    rtn.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x20, 6, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("char *DefaultStringList::get(int)", 1007, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("int DefaultStringList::getSize()", 1008, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("int DefaultStringList::size()", 1009, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("void DefaultStringList::append(char *)", 1010, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("void DefaultStringList::clear()", 1011, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x100, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("DefaultStringList &DefaultStringList::DefaultStringList()", 1013, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("void DefaultStringList::dump()", 1014, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x100, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x100, 0, 4, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("DefaultStringList &DefaultStringList::DefaultStringList(const DefaultStringList &)", 1015, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x100, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x100, 0, 4, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("DefaultStringList &DefaultStringList::operator=(const DefaultStringList &)", 1016, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x100, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("VectorStringList &VectorStringList::VectorStringList()", 1413, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x100, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 128, 0, 0, 0);
    arg0.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("VectorStringList &VectorStringList::VectorStringList(char **)", 1424, types, 0);
    proto.setIsMethod( true );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 128, 0, 0, 0);
    rtn.setIndirectType(0x80, 32, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("char **VectorStringList::argvList()", 1431, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("void VectorStringList::clear()", 1435, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("void VectorStringList::dump()", 1436, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 32, 0, 0, 0);
    rtn.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x20, 6, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("char *VectorStringList::get(int)", 1619, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("int VectorStringList::getSize()", 1620, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x20, 6, 0, 0, 0);
    types.push_back( rtn );
    Prototype proto("int VectorStringList::size()", 1621, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x10, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 32, 0, 0, 0);
    arg0.setIndirectType(0x20, 1, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("void VectorStringList::append(char *)", 1622, types, 0);
    proto.setIsMethod( false );
    pMap.addPrototype( proto );
  }

  {
    vector<Siloon::Type> types;
    Type rtn(0x80, 0, 112, 0, 0);
    rtn.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( rtn );
    Type arg0(0x80, 0, 112, 0, 0);
    arg0.setIndirectType(0x70007000, 0, 0, 0, 0);
    types.push_back( arg0 );
    Prototype proto("gov::cca::BuilderService *BuilderService_Cast(gov::cca::Port *)", 2528, types, 0);
    pMap.addPrototype( proto );
  }

  //
  // Register Fortran functions
  //

}
