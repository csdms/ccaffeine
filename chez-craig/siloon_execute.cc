// This file is automatically generated

#include <iostream>
#include <siloon.h>
#include <Buffer.h>
#include <Complex.h>
#include <Pointer.h>
#include "siloon_includes.h"
#include "siloon_execute.h"
#include <map>

int SiloonInvokeCFunction(Siloon::Buffer& buf, ContextID& id)
{
  int funcID;
  int error = SILOON_SUCCESS;

  buf.openIStream();
  buf.unpack(&funcID);

  // check for Siloon utility functions
  if (funcID == -1) return SILOON_FAILURE;
  if (funcID < 0) return siloonUtils(funcID, buf, id);

  int numArgs;
  buf.unpack(&numArgs);
  switch (funcID) {

    case 4: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 3: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         char* arg1;
         buf.unpackArrayInPlace(arg1);
         Siloon::ServerPointer arg2(buf);
         gov::cca::PortInfo * rtn = ((gov::cca::Services *)(void*) self)->createPortInfo(arg0, arg1, (char **)(void*) arg2);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::PortInfo *gov::cca::Services::createPortInfo(char *, char *, char **)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 5: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         gov::cca::Port * rtn = ((gov::cca::Services *)(void*) self)->getPort(arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::Port *gov::cca::Services::getPort(char *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 6: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         gov::cca::StringList * rtn = ((gov::cca::BuilderService *)(void*) self)->getComponentClasses();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::StringList *gov::cca::BuilderService::getComponentClasses()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 7: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 2: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         char* arg1;
         buf.unpackArrayInPlace(arg1);
         gov::cca::ComponentID * rtn = ((gov::cca::BuilderService *)(void*) self)->createInstance(arg0, arg1);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::ComponentID *gov::cca::BuilderService::createInstance(char *, char *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 9: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         int arg0;
         buf.unpack(&arg0);
         string rtn = ((gov::cca::StringList *)(void*) self)->get(arg0);
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char *gov::cca::StringList::get(int)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 10: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         gov::cca::ComponentID * rtn = ((gov::cca::BuilderService *)(void*) self)->getComponentID(arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::ComponentID *gov::cca::BuilderService::getComponentID(char *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 11: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         gov::cca::StringList * rtn = ((gov::cca::BuilderService *)(void*) self)->getProvidesPortStrings((gov::cca::ComponentID *)(void*) arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::StringList *gov::cca::BuilderService::getProvidesPortStrings(gov::cca::ComponentID *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 12: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         int rtn = ((gov::cca::Services *)(void*) self)->registerUsesPort((gov::cca::PortInfo *)(void*) arg0);
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int gov::cca::Services::registerUsesPort(gov::cca::PortInfo *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 15: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         int rtn = ((gov::cca::StringList *)(void*) self)->getSize();
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int gov::cca::StringList::getSize()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 16: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         string rtn = ((gov::cca::ComponentID *)(void*) self)->toString();
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char *gov::cca::ComponentID::toString()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 17: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         gov::cca::StringList * rtn = ((gov::cca::BuilderService *)(void*) self)->getComponentInstanceNames();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::StringList *gov::cca::BuilderService::getComponentInstanceNames()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 18: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         gov::cca::StringList * rtn = ((gov::cca::BuilderService *)(void*) self)->getUsesPortStrings((gov::cca::ComponentID *)(void*) arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::StringList *gov::cca::BuilderService::getUsesPortStrings(gov::cca::ComponentID *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 19: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 5: {
         Siloon::ServerPointer arg0(buf);
         char* arg1;
         buf.unpackArrayInPlace(arg1);
         Siloon::ServerPointer arg2(buf);
         char* arg3;
         buf.unpackArrayInPlace(arg3);
         char* arg4;
         buf.unpackArrayInPlace(arg4);
         ((gov::cca::BuilderService *)(void*) self)->connect((gov::cca::ComponentID *)(void*) arg0, arg1, (gov::cca::ComponentID *)(void*) arg2, arg3, arg4);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void gov::cca::BuilderService::connect(gov::cca::ComponentID *, char *, gov::cca::ComponentID *, char *, char *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 20: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 2: {
         Siloon::ServerPointer arg0(buf);
         char* arg1;
         buf.unpackArrayInPlace(arg1);
         ((gov::cca::BuilderService *)(void*) self)->go((gov::cca::ComponentID *)(void*) arg0, arg1);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void gov::cca::BuilderService::go(gov::cca::ComponentID *, char *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 257: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         int arg0;
         buf.unpack(&arg0);
         string rtn = ((jcpp::StringVector *)(void*) self)->get(arg0);
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char *jcpp::StringVector::get(int)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 880: {
      switch (numArgs) {
        case 0: {
         jcpp::StringVector * rtn = ComponentFactory::getPallet();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `jcpp::StringVector *ComponentFactory::getPallet()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 882: {
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         ComponentFactory::setComponentPath((char **)(void*) arg0);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void ComponentFactory::setComponentPath(char **)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 883: {
      switch (numArgs) {
        case 0: {
         char ** rtn = ComponentFactory::getComponentPath();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char **ComponentFactory::getComponentPath()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 884: {
      switch (numArgs) {
        case 0: {
         int rtn = ComponentFactory::searchComponentPath();
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int ComponentFactory::searchComponentPath()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 885: {
      switch (numArgs) {
        case 0: {
         char ** rtn = ComponentFactory::getLoadedComponents();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char **ComponentFactory::getLoadedComponents()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 886: {
      switch (numArgs) {
        case 0: {
         char ** rtn = ComponentFactory::getUnloadedComponents();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char **ComponentFactory::getUnloadedComponents()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 887: {
      switch (numArgs) {
        case 0: {
         char ** rtn = ComponentFactory::getLoadedLibraries();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char **ComponentFactory::getLoadedLibraries()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 888: {
      switch (numArgs) {
        case 3: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         char arg1;
         buf.unpack(&arg1);
         char arg2;
         buf.unpack(&arg2);
         int rtn = ComponentFactory::loadPallet(arg0, arg1, arg2);
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int ComponentFactory::loadPallet(char *, char, char)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 908: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         jcpp::StringVector * rtn = ((ConnectionFramework *)(void*) self)->getComponentClasses();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `jcpp::StringVector *ConnectionFramework::getComponentClasses()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 938: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         int * arg0;
         buf.unpackInPlace(arg0);
         char ** rtn = ((BuilderModel *)(void*) self)->getPallet(*arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char **BuilderModel::getPallet(int &)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 978: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 3: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         char* arg1;
         buf.unpackArrayInPlace(arg1);
         Siloon::ServerPointer arg2(buf);
         gov::cca::Services * rtn = ((CcaffeineAbstractFramework *)(void*) self)->getBootstrapServices(arg0, arg1, (char **)(void*) arg2);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::Services *CcaffeineAbstractFramework::getBootstrapServices(char *, char *, char **)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 979: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         ((CcaffeineAbstractFramework *)(void*) self)->releaseBootstrapServices((gov::cca::Services *)(void*) arg0);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void CcaffeineAbstractFramework::releaseBootstrapServices(gov::cca::Services *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 984: {
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         CcaffeineAbstractFramework * rtn = new CcaffeineAbstractFramework((gov::cca::StringList *)(void*) arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `CcaffeineAbstractFramework &CcaffeineAbstractFramework::CcaffeineAbstractFramework(gov::cca::StringList *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1007: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         int arg0;
         buf.unpack(&arg0);
         string rtn = ((DefaultStringList *)(void*) self)->get(arg0);
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char *DefaultStringList::get(int)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1008: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         int rtn = ((DefaultStringList *)(void*) self)->getSize();
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int DefaultStringList::getSize()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1009: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         int rtn = ((DefaultStringList *)(void*) self)->size();
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int DefaultStringList::size()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1010: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         ((DefaultStringList *)(void*) self)->append(arg0);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void DefaultStringList::append(char *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1011: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         ((DefaultStringList *)(void*) self)->clear();
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void DefaultStringList::clear()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1013: {
      switch (numArgs) {
        case 0: {
         DefaultStringList * rtn = new DefaultStringList();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `DefaultStringList &DefaultStringList::DefaultStringList()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1014: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         ((DefaultStringList *)(void*) self)->dump();
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void DefaultStringList::dump()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1015: {
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         DefaultStringList * rtn = new DefaultStringList(*(const DefaultStringList *)(void*) arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `DefaultStringList &DefaultStringList::DefaultStringList(const DefaultStringList &)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1016: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         DefaultStringList * rtn = & ((DefaultStringList *)(void*) self)->operator=(*(const DefaultStringList *)(void*) arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `DefaultStringList &DefaultStringList::operator=(const DefaultStringList &)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1413: {
      switch (numArgs) {
        case 0: {
         VectorStringList * rtn = new VectorStringList();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `VectorStringList &VectorStringList::VectorStringList()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1424: {
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         VectorStringList * rtn = new VectorStringList((char **)(void*) arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `VectorStringList &VectorStringList::VectorStringList(char **)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1431: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         char ** rtn = ((VectorStringList *)(void*) self)->argvList();
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char **VectorStringList::argvList()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1435: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         ((VectorStringList *)(void*) self)->clear();
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void VectorStringList::clear()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1436: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         ((VectorStringList *)(void*) self)->dump();
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void VectorStringList::dump()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1619: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         int arg0;
         buf.unpack(&arg0);
         string rtn = ((VectorStringList *)(void*) self)->get(arg0);
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `char *VectorStringList::get(int)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1620: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         int rtn = ((VectorStringList *)(void*) self)->getSize();
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int VectorStringList::getSize()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1621: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 0: {
         int rtn = ((VectorStringList *)(void*) self)->size();
         buf.reset();
         buf.pack(rtn);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `int VectorStringList::size()'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 1622: {
      Siloon::ServerPointer self(buf);
      switch (numArgs) {
        case 1: {
         char* arg0;
         buf.unpackArrayInPlace(arg0);
         ((VectorStringList *)(void*) self)->append(arg0);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `void VectorStringList::append(char *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    case 2528: {
      switch (numArgs) {
        case 1: {
         Siloon::ServerPointer arg0(buf);
         gov::cca::BuilderService * rtn = BuilderService_Cast((gov::cca::Port *)(void*) arg0);
         buf.reset();
         Siloon::ServerPointer sp(rtn, id);
         sp.pack(buf);
         break;
        }
        default: {
         std::cerr << "Error, wrong number of arguments sent to "
                   << "function `gov::cca::BuilderService *BuilderService_Cast(gov::cca::Port *)'." << std::endl;
         return SILOON_FAILURE;
        }
      }
      break;
    }

    default: {
      error = SILOON_FAILURE;
      break;
    }
  }

  return error;
}


int SiloonInvokeFFunction(Siloon::Buffer& buf, ContextID& id)
{
  int funcID;
  int error = SILOON_SUCCESS;

  buf.openIStream();
  buf.unpack(&funcID);

  // check for Siloon utility functions
  if (funcID == -1) return SILOON_FAILURE;
  if (funcID < 0) return siloonUtils(funcID, buf, id);

  int numArgs;
  buf.unpack(&numArgs);
  switch (funcID) {
    default: {
      error = SILOON_FAILURE;
      break;
    }
  }

  return error;
}


extern "C" {


};
