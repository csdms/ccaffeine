static void forceSTL();

extern "C" {

#include "util/blasTypes.h"
#include "util/lapackTypes.h"
#include "util/mpichTypes.h"
#include "util/fmpichTypes.h"

void forceBlas();
void forceLapack();
void forceMpich();

static char *cca_whiner_var=0;

void CCAFE_DoNothing() { return; } 

#ifndef _CCAMPI
#define forceMpich CCAFE_DoNothing
#endif
#ifndef _HAVE_BLAS
#define forceBlas CCAFE_DoNothing
#endif
#ifndef _HAVE_LAPACK
#define forceLapack CCAFE_DoNothing
#endif

void forceIsisBlasLapackLink(int j) {
	if (j) {
		forceBlas();
		forceLapack();
		forceMpich();
		forceSTL();
	}

}

#ifdef _HAVE_BLAS
static char *cca_force_blas_lib="forcing blas in: $Id: forceIsisBlasLapackLink.cxx,v 1.15 2004/06/08 20:24:21 lefantzi Exp $";
void forceBlas() {
	cca_whiner_var = cca_force_blas_lib;
/* ./genlibheader analysis of /usr/local/lib/libblas.a /usr/lib/gcc-lib/i386-redhat-linux/egcs-2.90.29/libf2c.a -lm 
Function definitions here are probably not correct but are 
link compatible for static link forcing purposes.
*/
	caxpy_();
	ccopy_();
	cdotc_();
	cdotu_();
	cgbmv_();
	cgemm_();
	cgemv_();
	cgerc_();
	cgeru_();
	chbmv_();
	chemm_();
	chemv_();
	cher_();
	cher2_();
	cher2k_();
	cherk_();
	chpmv_();
	chpr_();
	chpr2_();
	crotg_();
	cscal_();
	csrot_();
	csscal_();
	cswap_();
	csymm_();
	csyr2k_();
	csyrk_();
	ctbmv_();
	ctbsv_();
	ctpmv_();
	ctpsv_();
	ctrmm_();
	ctrmv_();
	ctrsm_();
	ctrsv_();
	dasum_();
	daxpy_();
	dcabs1_();
	dcopy_();
	ddot_();
	dgbmv_();
	dgemm_();
	dgemv_();
	dger_();
	dnrm2_();
	drot_();
	drotg_();
	dsbmv_();
	dscal_();
	dspmv_();
	dspr_();
	dspr2_();
	dswap_();
	dsymm_();
	dsymv_();
	dsyr_();
	dsyr2_();
	dsyr2k_();
	dsyrk_();
	dtbmv_();
	dtbsv_();
	dtpmv_();
	dtpsv_();
	dtrmm_();
	dtrmv_();
	dtrsm_();
	dtrsv_();
	dzasum_();
	dznrm2_();
	icamax_();
	idamax_();
	isamax_();
	izamax_();
	lsame_();
	sasum_();
	saxpy_();
	scasum_();
	scnrm2_();
	scopy_();
	sdot_();
	sgbmv_();
	sgemm_();
	sgemv_();
	sger_();
	snrm2_();
	srot_();
	srotg_();
	ssbmv_();
	sscal_();
	sspmv_();
	sspr_();
	sspr2_();
	sswap_();
	ssymm_();
	ssymv_();
	ssyr_();
	ssyr2_();
	ssyr2k_();
	ssyrk_();
	stbmv_();
	stbsv_();
	stpmv_();
	stpsv_();
	strmm_();
	strmv_();
	strsm_();
	strsv_();
	xerbla_();
	zaxpy_();
	zcopy_();
	zdotc_();
	zdotu_();
	zdrot_();
	zdscal_();
	zgbmv_();
	zgemm_();
	zgemv_();
	zgerc_();
	zgeru_();
	zhbmv_();
	zhemm_();
	zhemv_();
	zher_();
	zher2_();
	zher2k_();
	zherk_();
	zhpmv_();
	zhpr_();
	zhpr2_();
	zrotg_();
	zscal_();
	zswap_();
	zsymm_();
	zsyr2k_();
	zsyrk_();
	ztbmv_();
	ztbsv_();
	ztpmv_();
	ztpsv_();
	ztrmm_();
	ztrmv_();
	ztrsm_();
	ztrsv_();
}
#endif // haveblas

#ifdef _HAVE_LAPACK
static char *cca_forceLapack="forcing lapack in $Id: forceIsisBlasLapackLink.cxx,v 1.15 2004/06/08 20:24:21 lefantzi Exp $";
void forceLapack() {
	cca_whiner_var = cca_forceLapack;
/* ./genlibheader analysis of /usr/local/lib/liblapack.a -lblas /usr/lib/gcc-lib/i386-redhat-linux/egcs-2.90.29/libf2c.a -lm 
Function definitions here are probably not correct but are 
link compatible for static link forcing purposes.
*/
	cbdsqr_();
	cgbbrd_();
	cgbcon_();
	cgbequ_();
	cgbrfs_();
	cgbsv_();
	cgbsvx_();
	cgbtf2_();
	cgbtrf_();
	cgbtrs_();
	cgebak_();
	cgebal_();
	cgebd2_();
	cgebrd_();
	cgecon_();
	cgeequ_();
	cgees_();
	cgeesx_();
	cgeev_();
	cgeevx_();
	cgegs_();
	cgegv_();
	cgehd2_();
	cgehrd_();
	cgelq2_();
	cgelqf_();
	cgels_();
	cgelss_();
	cgelsx_();
	cgeql2_();
	cgeqlf_();
	cgeqpf_();
	cgeqr2_();
	cgeqrf_();
	cgerfs_();
	cgerq2_();
	cgerqf_();
	cgesv_();
	cgesvd_();
	cgesvx_();
	cgetf2_();
	cgetrf_();
	cgetri_();
	cgetrs_();
	cggbak_();
	cggbal_();
	cggglm_();
	cgghrd_();
	cgglse_();
	cggqrf_();
	cggrqf_();
	cggsvd_();
	cggsvp_();
	cgtcon_();
	cgtrfs_();
	cgtsv_();
	cgtsvx_();
	cgttrf_();
	cgttrs_();
	chbev_();
	chbevd_();
	chbevx_();
	chbgst_();
	chbgv_();
	chbtrd_();
	checon_();
	cheev_();
	cheevd_();
	cheevx_();
	chegs2_();
	chegst_();
	chegv_();
	cherfs_();
	chesv_();
	chesvx_();
	chetd2_();
	chetf2_();
	chetrd_();
	chetrf_();
	chetri_();
	chetrs_();
	chgeqz_();
	chpcon_();
	chpev_();
	chpevd_();
	chpevx_();
	chpgst_();
	chpgv_();
	chprfs_();
	chpsv_();
	chpsvx_();
	chptrd_();
	chptrf_();
	chptri_();
	chptrs_();
	chsein_();
	chseqr_();
	clabrd_();
	clacgv_();
	clacon_();
	clacpy_();
	clacrm_();
	clacrt_();
	cladiv_();
	claed0_();
	claed7_();
	claed8_();
	claein_();
	claesy_();
	claev2_();
	clags2_();
	clagtm_();
	clahef_();
	clahqr_();
	clahrd_();
	claic1_();
	clangb_();
	clange_();
	clangt_();
	clanhb_();
	clanhe_();
	clanhp_();
	clanhs_();
	clanht_();
	clansb_();
	clansp_();
	clansy_();
	clantb_();
	clantp_();
	clantr_();
	clapll_();
	clapmt_();
	claqgb_();
	claqge_();
	claqhb_();
	claqhe_();
	claqhp_();
	claqsb_();
	claqsp_();
	claqsy_();
	clar2v_();
	clarf_();
	clarfb_();
	clarfg_();
	clarft_();
	clarfx_();
	clargv_();
	clarnv_();
	clartg_();
	clartv_();
	clascl_();
	claset_();
	clasr_();
	classq_();
	claswp_();
	clasyf_();
	clatbs_();
	clatps_();
	clatrd_();
	clatrs_();
	clatzm_();
	clauu2_();
	clauum_();
	cpbcon_();
	cpbequ_();
	cpbrfs_();
	cpbstf_();
	cpbsv_();
	cpbsvx_();
	cpbtf2_();
	cpbtrf_();
	cpbtrs_();
	cpocon_();
	cpoequ_();
	cporfs_();
	cposv_();
	cposvx_();
	cpotf2_();
	cpotrf_();
	cpotri_();
	cpotrs_();
	cppcon_();
	cppequ_();
	cpprfs_();
	cppsv_();
	cppsvx_();
	cpptrf_();
	cpptri_();
	cpptrs_();
	cptcon_();
	cpteqr_();
	cptrfs_();
	cptsv_();
	cptsvx_();
	cpttrf_();
	cpttrs_();
	crot_();
	cspcon_();
	cspmv_();
	cspr_();
	csprfs_();
	cspsv_();
	cspsvx_();
	csptrf_();
	csptri_();
	csptrs_();
	csrot_();
	csrscl_();
	cstedc_();
	cstein_();
	csteqr_();
	csycon_();
	csymv_();
	csyr_();
	csyrfs_();
	csysv_();
	csysvx_();
	csytf2_();
	csytrf_();
	csytri_();
	csytrs_();
	ctbcon_();
	ctbrfs_();
	ctbtrs_();
	ctgevc_();
	ctgsja_();
	ctpcon_();
	ctprfs_();
	ctptri_();
	ctptrs_();
	ctrcon_();
	ctrevc_();
	ctrexc_();
	ctrrfs_();
	ctrsen_();
	ctrsna_();
	ctrsyl_();
	ctrti2_();
	ctrtri_();
	ctrtrs_();
	ctzrqf_();
	cung2l_();
	cung2r_();
	cungbr_();
	cunghr_();
	cungl2_();
	cunglq_();
	cungql_();
	cungqr_();
	cungr2_();
	cungrq_();
	cungtr_();
	cunm2l_();
	cunm2r_();
	cunmbr_();
	cunmhr_();
	cunml2_();
	cunmlq_();
	cunmql_();
	cunmqr_();
	cunmr2_();
	cunmrq_();
	cunmtr_();
	cupgtr_();
	cupmtr_();
	dbdsqr_();
	ddisna_();
	dgbbrd_();
	dgbcon_();
	dgbequ_();
	dgbrfs_();
	dgbsv_();
	dgbsvx_();
	dgbtf2_();
	dgbtrf_();
	dgbtrs_();
	dgebak_();
	dgebal_();
	dgebd2_();
	dgebrd_();
	dgecon_();
	dgeequ_();
	dgees_();
	dgeesx_();
	dgeev_();
	dgeevx_();
	dgegs_();
	dgegv_();
	dgehd2_();
	dgehrd_();
	dgelq2_();
	dgelqf_();
	dgels_();
	dgelss_();
	dgelsx_();
	dgeql2_();
	dgeqlf_();
	dgeqpf_();
	dgeqr2_();
	dgeqrf_();
	dgerfs_();
	dgerq2_();
	dgerqf_();
	dgesv_();
	dgesvd_();
	dgesvx_();
	dgetf2_();
	dgetrf_();
	dgetri_();
	dgetrs_();
	dggbak_();
	dggbal_();
	dggglm_();
	dgghrd_();
	dgglse_();
	dggqrf_();
	dggrqf_();
	dggsvd_();
	dggsvp_();
	dgtcon_();
	dgtrfs_();
	dgtsv_();
	dgtsvx_();
	dgttrf_();
	dgttrs_();
	dhgeqz_();
	dhsein_();
	dhseqr_();
	dlabad_();
	dlabrd_();
	dlacon_();
	dlacpy_();
	dladiv_();
	dlae2_();
	dlaebz_();
	dlaed0_();
	dlaed1_();
	dlaed2_();
	dlaed3_();
	dlaed4_();
	dlaed5_();
	dlaed6_();
	dlaed7_();
	dlaed8_();
	dlaed9_();
	dlaeda_();
	dlaein_();
	dlaev2_();
	dlaexc_();
	dlag2_();
	dlags2_();
	dlagtf_();
	dlagtm_();
	dlagts_();
	dlahqr_();
	dlahrd_();
	dlaic1_();
	dlaln2_();
	dlamc1_();
	dlamc2_();
	dlamc3_();
	dlamc4_();
	dlamc5_();
	dlamch_();
	dlamrg_();
	dlangb_();
	dlange_();
	dlangt_();
	dlanhs_();
	dlansb_();
	dlansp_();
	dlanst_();
	dlansy_();
	dlantb_();
	dlantp_();
	dlantr_();
	dlanv2_();
	dlapll_();
	dlapmt_();
	dlapy2_();
	dlapy3_();
	dlaqgb_();
	dlaqge_();
	dlaqsb_();
	dlaqsp_();
	dlaqsy_();
	dlaqtr_();
	dlar2v_();
	dlarf_();
	dlarfb_();
	dlarfg_();
	dlarft_();
	dlarfx_();
	dlargv_();
	dlarnv_();
	dlartg_();
	dlartv_();
	dlaruv_();
	dlas2_();
	dlascl_();
	dlaset_();
	dlasq1_();
	dlasq2_();
	dlasq3_();
	dlasq4_();
	dlasr_();
	dlasrt_();
	dlassq_();
	dlasv2_();
	dlaswp_();
	dlasy2_();
	dlasyf_();
	dlatbs_();
	dlatps_();
	dlatrd_();
	dlatrs_();
	dlatzm_();
	dlauu2_();
	dlauum_();
	dopgtr_();
	dopmtr_();
	dorg2l_();
	dorg2r_();
	dorgbr_();
	dorghr_();
	dorgl2_();
	dorglq_();
	dorgql_();
	dorgqr_();
	dorgr2_();
	dorgrq_();
	dorgtr_();
	dorm2l_();
	dorm2r_();
	dormbr_();
	dormhr_();
	dorml2_();
	dormlq_();
	dormql_();
	dormqr_();
	dormr2_();
	dormrq_();
	dormtr_();
	dpbcon_();
	dpbequ_();
	dpbrfs_();
	dpbstf_();
	dpbsv_();
	dpbsvx_();
	dpbtf2_();
	dpbtrf_();
	dpbtrs_();
	dpocon_();
	dpoequ_();
	dporfs_();
	dposv_();
	dposvx_();
	dpotf2_();
	dpotrf_();
	dpotri_();
	dpotrs_();
	dppcon_();
	dppequ_();
	dpprfs_();
	dppsv_();
	dppsvx_();
	dpptrf_();
	dpptri_();
	dpptrs_();
	dptcon_();
	dpteqr_();
	dptrfs_();
	dptsv_();
	dptsvx_();
	dpttrf_();
	dpttrs_();
	drscl_();
	dsbev_();
	dsbevd_();
	dsbevx_();
	dsbgst_();
	dsbgv_();
	dsbtrd_();
	dsecnd_();
	dspcon_();
	dspev_();
	dspevd_();
	dspevx_();
	dspgst_();
	dspgv_();
	dsprfs_();
	dspsv_();
	dspsvx_();
	dsptrd_();
	dsptrf_();
	dsptri_();
	dsptrs_();
	dstebz_();
	dstedc_();
	dstein_();
	dsteqr_();
	dsterf_();
	dstev_();
	dstevd_();
	dstevx_();
	dsycon_();
	dsyev_();
	dsyevd_();
	dsyevx_();
	dsygs2_();
	dsygst_();
	dsygv_();
	dsyrfs_();
	dsysv_();
	dsysvx_();
	dsytd2_();
	dsytf2_();
	dsytrd_();
	dsytrf_();
	dsytri_();
	dsytrs_();
	dtbcon_();
	dtbrfs_();
	dtbtrs_();
	dtgevc_();
	dtgsja_();
	dtpcon_();
	dtprfs_();
	dtptri_();
	dtptrs_();
	dtrcon_();
	dtrevc_();
	dtrexc_();
	dtrrfs_();
	dtrsen_();
	dtrsna_();
	dtrsyl_();
	dtrti2_();
	dtrtri_();
	dtrtrs_();
	dtzrqf_();
	dzsum1_();
	icmax1_();
	ilaenv_();
	izmax1_();
	lsame_();
	lsamen_();
	sbdsqr_();
	scsum1_();
	sdisna_();
	second_();
	sgbbrd_();
	sgbcon_();
	sgbequ_();
	sgbrfs_();
	sgbsv_();
	sgbsvx_();
	sgbtf2_();
	sgbtrf_();
	sgbtrs_();
	sgebak_();
	sgebal_();
	sgebd2_();
	sgebrd_();
	sgecon_();
	sgeequ_();
	sgees_();
	sgeesx_();
	sgeev_();
	sgeevx_();
	sgegs_();
	sgegv_();
	sgehd2_();
	sgehrd_();
	sgelq2_();
	sgelqf_();
	sgels_();
	sgelss_();
	sgelsx_();
	sgeql2_();
	sgeqlf_();
	sgeqpf_();
	sgeqr2_();
	sgeqrf_();
	sgerfs_();
	sgerq2_();
	sgerqf_();
	sgesv_();
	sgesvd_();
	sgesvx_();
	sgetf2_();
	sgetrf_();
	sgetri_();
	sgetrs_();
	sggbak_();
	sggbal_();
	sggglm_();
	sgghrd_();
	sgglse_();
	sggqrf_();
	sggrqf_();
	sggsvd_();
	sggsvp_();
	sgtcon_();
	sgtrfs_();
	sgtsv_();
	sgtsvx_();
	sgttrf_();
	sgttrs_();
	shgeqz_();
	shsein_();
	shseqr_();
	slabad_();
	slabrd_();
	slacon_();
	slacpy_();
	sladiv_();
	slae2_();
	slaebz_();
	slaed0_();
	slaed1_();
	slaed2_();
	slaed3_();
	slaed4_();
	slaed5_();
	slaed6_();
	slaed7_();
	slaed8_();
	slaed9_();
	slaeda_();
	slaein_();
	slaev2_();
	slaexc_();
	slag2_();
	slags2_();
	slagtf_();
	slagtm_();
	slagts_();
	slahqr_();
	slahrd_();
	slaic1_();
	slaln2_();
	slamc1_();
	slamc2_();
	slamc3_();
	slamc4_();
	slamc5_();
	slamch_();
	slamrg_();
	slangb_();
	slange_();
	slangt_();
	slanhs_();
	slansb_();
	slansp_();
	slanst_();
	slansy_();
	slantb_();
	slantp_();
	slantr_();
	slanv2_();
	slapll_();
	slapmt_();
	slapy2_();
	slapy3_();
	slaqgb_();
	slaqge_();
	slaqsb_();
	slaqsp_();
	slaqsy_();
	slaqtr_();
	slar2v_();
	slarf_();
	slarfb_();
	slarfg_();
	slarft_();
	slarfx_();
	slargv_();
	slarnv_();
	slartg_();
	slartv_();
	slaruv_();
	slas2_();
	slascl_();
	slaset_();
	slasq1_();
	slasq2_();
	slasq3_();
	slasq4_();
	slasr_();
	slasrt_();
	slassq_();
	slasv2_();
	slaswp_();
	slasy2_();
	slasyf_();
	slatbs_();
	slatps_();
	slatrd_();
	slatrs_();
	slatzm_();
	slauu2_();
	slauum_();
	sopgtr_();
	sopmtr_();
	sorg2l_();
	sorg2r_();
	sorgbr_();
	sorghr_();
	sorgl2_();
	sorglq_();
	sorgql_();
	sorgqr_();
	sorgr2_();
	sorgrq_();
	sorgtr_();
	sorm2l_();
	sorm2r_();
	sormbr_();
	sormhr_();
	sorml2_();
	sormlq_();
	sormql_();
	sormqr_();
	sormr2_();
	sormrq_();
	sormtr_();
	spbcon_();
	spbequ_();
	spbrfs_();
	spbstf_();
	spbsv_();
	spbsvx_();
	spbtf2_();
	spbtrf_();
	spbtrs_();
	spocon_();
	spoequ_();
	sporfs_();
	sposv_();
	sposvx_();
	spotf2_();
	spotrf_();
	spotri_();
	spotrs_();
	sppcon_();
	sppequ_();
	spprfs_();
	sppsv_();
	sppsvx_();
	spptrf_();
	spptri_();
	spptrs_();
	sptcon_();
	spteqr_();
	sptrfs_();
	sptsv_();
	sptsvx_();
	spttrf_();
	spttrs_();
	srscl_();
	ssbev_();
	ssbevd_();
	ssbevx_();
	ssbgst_();
	ssbgv_();
	ssbtrd_();
	sspcon_();
	sspev_();
	sspevd_();
	sspevx_();
	sspgst_();
	sspgv_();
	ssprfs_();
	sspsv_();
	sspsvx_();
	ssptrd_();
	ssptrf_();
	ssptri_();
	ssptrs_();
	sstebz_();
	sstedc_();
	sstein_();
	ssteqr_();
	ssterf_();
	sstev_();
	sstevd_();
	sstevx_();
	ssycon_();
	ssyev_();
	ssyevd_();
	ssyevx_();
	ssygs2_();
	ssygst_();
	ssygv_();
	ssyrfs_();
	ssysv_();
	ssysvx_();
	ssytd2_();
	ssytf2_();
	ssytrd_();
	ssytrf_();
	ssytri_();
	ssytrs_();
	stbcon_();
	stbrfs_();
	stbtrs_();
	stgevc_();
	stgsja_();
	stpcon_();
	stprfs_();
	stptri_();
	stptrs_();
	strcon_();
	strevc_();
	strexc_();
	strrfs_();
	strsen_();
	strsna_();
	strsyl_();
	strti2_();
	strtri_();
	strtrs_();
	stzrqf_();
	xerbla_();
	zbdsqr_();
	zdrot_();
	zdrscl_();
	zgbbrd_();
	zgbcon_();
	zgbequ_();
	zgbrfs_();
	zgbsv_();
	zgbsvx_();
	zgbtf2_();
	zgbtrf_();
	zgbtrs_();
	zgebak_();
	zgebal_();
	zgebd2_();
	zgebrd_();
	zgecon_();
	zgeequ_();
	zgees_();
	zgeesx_();
	zgeev_();
	zgeevx_();
	zgegs_();
	zgegv_();
	zgehd2_();
	zgehrd_();
	zgelq2_();
	zgelqf_();
	zgels_();
	zgelss_();
	zgelsx_();
	zgeql2_();
	zgeqlf_();
	zgeqpf_();
	zgeqr2_();
	zgeqrf_();
	zgerfs_();
	zgerq2_();
	zgerqf_();
	zgesv_();
	zgesvd_();
	zgesvx_();
	zgetf2_();
	zgetrf_();
	zgetri_();
	zgetrs_();
	zggbak_();
	zggbal_();
	zggglm_();
	zgghrd_();
	zgglse_();
	zggqrf_();
	zggrqf_();
	zggsvd_();
	zggsvp_();
	zgtcon_();
	zgtrfs_();
	zgtsv_();
	zgtsvx_();
	zgttrf_();
	zgttrs_();
	zhbev_();
	zhbevd_();
	zhbevx_();
	zhbgst_();
	zhbgv_();
	zhbtrd_();
	zhecon_();
	zheev_();
	zheevd_();
	zheevx_();
	zhegs2_();
	zhegst_();
	zhegv_();
	zherfs_();
	zhesv_();
	zhesvx_();
	zhetd2_();
	zhetf2_();
	zhetrd_();
	zhetrf_();
	zhetri_();
	zhetrs_();
	zhgeqz_();
	zhpcon_();
	zhpev_();
	zhpevd_();
	zhpevx_();
	zhpgst_();
	zhpgv_();
	zhprfs_();
	zhpsv_();
	zhpsvx_();
	zhptrd_();
	zhptrf_();
	zhptri_();
	zhptrs_();
	zhsein_();
	zhseqr_();
	zlabrd_();
	zlacgv_();
	zlacon_();
	zlacpy_();
	zlacrm_();
	zlacrt_();
	zladiv_();
	zlaed0_();
	zlaed7_();
	zlaed8_();
	zlaein_();
	zlaesy_();
	zlaev2_();
	zlags2_();
	zlagtm_();
	zlahef_();
	zlahqr_();
	zlahrd_();
	zlaic1_();
	zlangb_();
	zlange_();
	zlangt_();
	zlanhb_();
	zlanhe_();
	zlanhp_();
	zlanhs_();
	zlanht_();
	zlansb_();
	zlansp_();
	zlansy_();
	zlantb_();
	zlantp_();
	zlantr_();
	zlapll_();
	zlapmt_();
	zlaqgb_();
	zlaqge_();
	zlaqhb_();
	zlaqhe_();
	zlaqhp_();
	zlaqsb_();
	zlaqsp_();
	zlaqsy_();
	zlar2v_();
	zlarf_();
	zlarfb_();
	zlarfg_();
	zlarft_();
	zlarfx_();
	zlargv_();
	zlarnv_();
	zlartg_();
	zlartv_();
	zlascl_();
	zlaset_();
	zlasr_();
	zlassq_();
	zlaswp_();
	zlasyf_();
	zlatbs_();
	zlatps_();
	zlatrd_();
	zlatrs_();
	zlatzm_();
	zlauu2_();
	zlauum_();
	zpbcon_();
	zpbequ_();
	zpbrfs_();
	zpbstf_();
	zpbsv_();
	zpbsvx_();
	zpbtf2_();
	zpbtrf_();
	zpbtrs_();
	zpocon_();
	zpoequ_();
	zporfs_();
	zposv_();
	zposvx_();
	zpotf2_();
	zpotrf_();
	zpotri_();
	zpotrs_();
	zppcon_();
	zppequ_();
	zpprfs_();
	zppsv_();
	zppsvx_();
	zpptrf_();
	zpptri_();
	zpptrs_();
	zptcon_();
	zpteqr_();
	zptrfs_();
	zptsv_();
	zptsvx_();
	zpttrf_();
	zpttrs_();
	zrot_();
	zspcon_();
	zspmv_();
	zspr_();
	zsprfs_();
	zspsv_();
	zspsvx_();
	zsptrf_();
	zsptri_();
	zsptrs_();
	zstedc_();
	zstein_();
	zsteqr_();
	zsycon_();
	zsymv_();
	zsyr_();
	zsyrfs_();
	zsysv_();
	zsysvx_();
	zsytf2_();
	zsytrf_();
	zsytri_();
	zsytrs_();
	ztbcon_();
	ztbrfs_();
	ztbtrs_();
	ztgevc_();
	ztgsja_();
	ztpcon_();
	ztprfs_();
	ztptri_();
	ztptrs_();
	ztrcon_();
	ztrevc_();
	ztrexc_();
	ztrrfs_();
	ztrsen_();
	ztrsna_();
	ztrsyl_();
	ztrti2_();
	ztrtri_();
	ztrtrs_();
	ztzrqf_();
	zung2l_();
	zung2r_();
	zungbr_();
	zunghr_();
	zungl2_();
	zunglq_();
	zungql_();
	zungqr_();
	zungr2_();
	zungrq_();
	zungtr_();
	zunm2l_();
	zunm2r_();
	zunmbr_();
	zunmhr_();
	zunml2_();
	zunmlq_();
	zunmql_();
	zunmqr_();
	zunmr2_();
	zunmrq_();
	zunmtr_();
	zupgtr_();
	zupmtr_();
}

#endif // have lapack

#ifdef _CCAMPI

static char *cca_forcempich="forcing mpich in $Id: forceIsisBlasLapackLink.cxx,v 1.15 2004/06/08 20:24:21 lefantzi Exp $";
void forceMpich() {
	cca_whiner_var = cca_forcempich;

/* ./genlibheader analysis of /usr/local/mpich/build/LINUX/ch_p4/lib/libmpich.a -lm */
/* types are sufficient to satisfy the linker, but not 100% accurate. */
	MPI_Isend();
	MPI_Irecv();
	MPI_Wait();
	MPI_Test();
	MPI_Address();
	MPI_Cancel();
	MPI_Request_free();
	MPI_Probe();
	MPI_Start();
	MPI_Testany();
	MPI_Waitall();
	MPI_Send();
	MPI_Recv();
	MPI_Sendrecv();
	MPI_Iprobe();
	MPI_Testall();
	MPI_Waitany();
	MPI_Recv_init();
	MPI_Send_init();
	MPI_Sendrecv_replace();
	MPI_Get_count();
	MPI_Bsend();
	MPI_Ssend();
	MPI_Rsend();
	MPI_Buffer_attach();
	MPI_Buffer_detach();
	MPI_Ibsend();
	MPI_Issend();
	MPI_Irsend();
	MPI_Waitsome();
	MPI_Testsome();
	MPI_Test_cancelled();
	MPI_Bsend_init();
	MPI_Rsend_init();
	MPI_Ssend_init();
	MPI_Startall();
	MPI_Type_commit();
	MPI_Type_contiguous();
	MPI_Type_extent();
	MPI_Type_free();
	MPI_Type_hindexed();
	MPI_Type_hvector();
	MPI_Type_indexed();
	MPI_Type_lb();
	MPI_Type_size();
	MPI_Type_struct();
	MPI_Type_ub();
	MPI_Type_vector();
	MPI_Get_elements();
	MPI_Pack_size();
	MPI_Pack();
	MPI_Unpack();
	MPI_Init();
	MPI_Finalize();
	MPI_Initialized();
	MPI_Error_string();
	MPI_Get_processor_name();
	MPI_Errhandler_create();
	MPI_Errhandler_set();
	MPI_Errhandler_get();
	MPI_Errhandler_free();
	MPI_Error_class();
	MPI_Wtime();
	MPI_Wtick();
	MPI_Get_version();
	MPI_Keyval_free();
	MPI_Keyval_create();
	MPI_Attr_get();
	MPI_Attr_delete();
	MPI_Attr_put();
	MPI_Group_excl();
	MPI_Group_difference();
	MPI_Group_free();
	MPI_Group_incl();
	MPI_Group_intersection();
	MPI_Group_range_excl();
	MPI_Group_range_incl();
	MPI_Group_compare();
	MPI_Group_rank();
	MPI_Group_size();
	MPI_Group_union();
	MPI_Comm_dup();
	MPI_Comm_free();
	MPI_Comm_group();
	MPI_Comm_create();
	MPI_Comm_rank();
	MPI_Comm_size();
	MPI_Comm_split();
	MPI_Group_translate_ranks();
	MPI_Comm_test_inter();
	MPI_Comm_compare();
	MPI_Comm_remote_size();
	MPI_Comm_remote_group();
	MPI_Intercomm_create();
	MPI_Intercomm_merge();
	MPI_Barrier();
	MPI_Bcast();
	MPI_Gather();
	MPI_Gatherv();
	MPI_Scatter();
	MPI_Scatterv();
	MPI_Allgather();
	MPI_Allgatherv();
	MPI_Alltoall();
	MPI_Alltoallv();
	MPI_Reduce();
	MPI_Allreduce();
	MPI_Reduce_scatter();
	MPI_Scan();
	MPI_Op_create();
	MPI_Op_free();
	MPI_Topo_test();
	MPI_Graphdims_get();
	MPI_Graph_get();
	MPI_Cartdim_get();
	MPI_Cart_get();
	MPI_Dims_create();
	MPI_Cart_map();
	MPI_Graph_map();
	MPI_Cart_create();
	MPI_Graph_create();
	MPI_Cart_rank();
	MPI_Cart_coords();
	MPI_Graph_neighbors_count();
	MPI_Graph_neighbors();
	MPI_Cart_shift();
	MPI_Cart_sub();
	MPI_Pcontrol();
	MPI_Finalized();

#ifdef MPICH_VERSION
	/* incomplete lampi implementaiton makes us leave these out
	 * 11/17/03 baa
	 **/
        MPI_Abort();
	MPI_Type_create_subarray();
	MPI_Type_create_darray();
	MPI_Info_create();
	MPI_Info_dup();
	MPI_Info_get();
	MPI_Info_get_nthkey();
	MPI_Info_set();
	MPI_Info_delete();
	MPI_Info_free();
	MPI_Info_get_nkeys();
	MPI_Info_get_valuelen();
#endif // have lampi

	MPI_Type_get_contents();
	MPI_Type_get_envelope();

#ifdef _HAVE_MPI_CH_P4
	MPI_Info_c2f();
	MPI_Info_f2c();
	MPIOI_Type_block();
	MPIOI_Type_cyclic();
	MPI_Comm_get_name();
	MPI_Comm_set_name();
	MPI_Request_c2f();
	MPI_Status_c2f();
	MPI_Status_f2c();
	MPI_Type_create_indexed_block();

	MPID_IrecvContig();
	MPID_RecvComplete();
	MPID_RecvContig();
	MPID_RecvIcomplete();
	MPID_BsendContig();
	MPID_IsendContig();
	MPID_SendComplete();
	MPID_SendContig();
	MPID_SendIcomplete();
	MPID_Complete_pending();
	MPID_DeviceCheck();
	MPID_End();
	MPID_Init();
	MPID_SetPktSize();
	MPID_Version_name();
	MPID_WaitForCompleteRecv();
	MPID_WaitForCompleteSend();
	MPID_Iprobe();
	MPID_Probe();
	MPID_IssendContig();
	MPID_SsendContig();
	MPID_IsendDatatype();
	MPID_SendDatatype();
	MPID_IrecvDatatype();
	MPID_RecvDatatype();
	MPID_Msg_act();
	MPID_Msg_rep();
	MPID_Pack();
	MPID_Pack_size();
	MPID_Unpack();
	MPID_PackMessage();
	MPID_PackMessageFree();
	MPID_UnpackMessageComplete();
	MPID_UnpackMessageSetup();
	MPID_IssendDatatype();
	MPID_SsendDatatype();
	MPID_BSwap_N_copy();
	MPID_BSwap_N_inplace();
	MPID_Mem_XDR_ByteDecode();
	MPID_Mem_XDR_ByteEncode();
	MPID_Mem_XDR_Decode();
	MPID_Mem_XDR_Decode_Logical();
	MPID_Mem_XDR_Encode();
	MPID_Mem_XDR_Encode_Logical();
	MPID_Mem_XDR_Free();
	MPID_Mem_XDR_Init();
	MPID_Mem_XDR_Len();
	MPID_Mem_convert_len();
	MPID_Type_XDR_decode();
	MPID_Type_XDR_encode();
	MPID_Type_swap_copy();
	MPID_Type_swap_inplace();
	MPID_Request_free();
	MPID_RecvCancel();
	MPID_SendCancel();
	MPID_GetMsgDebugFlag();
	MPID_Get_print_pkt();
	MPID_PrintMsgDebug();
	MPID_Print_Send_Handle();
	MPID_Print_mode();
	MPID_Print_packet();
	MPID_Print_pkt_data();
	MPID_Print_rhandle();
	MPID_Print_shandle();
	MPID_Rndv_print_pkt();
	MPID_SetDebugFile();
	MPID_SetDebugFlag();
	MPID_SetMsgDebugFlag();
	MPID_SetSpaceDebugFlag();
	MPID_Set_tracefile();
	MPID_CH_Check_incoming();
	MPID_CH_Eagerb_isend_short();
	MPID_CH_Eagerb_recv_short();
	MPID_CH_Eagerb_save_short();
	MPID_CH_Eagerb_send_short();
	MPID_CH_Eagerb_short_delete();
	MPID_CH_Eagerb_unxrecv_start_short();
	MPID_CH_Short_setup();
	MPID_FlowDebug();
	MPID_FlowDelete();
	MPID_FlowDump();
	MPID_FlowSetup();
	MPID_RecvFlowPacket();
	MPID_SendFlowPacket();
	MPID_CH_Abort();
	MPID_CH_End();
	MPID_CH_InitMsgPass();
	MPID_CH_Version_name();
	MPID_Node_name();
	MPID_ByteSwapInt();
	MPID_CH_Comm_msgrep();
	MPID_CH_Hetero_free();
	MPID_CH_Init_hetero();
	MPID_CH_Pkt_pack();
	MPID_CH_Pkt_unpack();
	MPID_GetByteOrder();
	MPID_CH_Wtick();
	MPID_P4_End();
	MPID_P4_Init();
	MPID_Dequeue();
	MPID_Dump_queue();
	MPID_Dump_queues();
	MPID_Enqueue();
	MPID_InitQueue();
	MPID_Msg_arrived();
	MPID_Search_posted_queue();
	MPID_Search_unexpected_queue();
	MPID_Search_unexpected_queue_and_post();
	MPID_ArgSqueeze();
	MPID_GetIntParameter();
	MPID_ProcessArgs();
	MPID_TrSetMaxMem();
	MPID_trDebugLevel();
	MPID_trImerge();
	MPID_trIsort();
	MPID_trSortBlocks();
	MPID_trSummary();
	MPID_trcalloc();
	MPID_trdump();
	MPID_trdumpGrouped();
	MPID_trfree();
	MPID_trid();
	MPID_trinit();
	MPID_trlevel();
	MPID_trmalloc();
	MPID_trpop();
	MPID_trpush();
	MPID_trrealloc();
	MPID_trspace();
	MPID_trvalid();
	MPID_SBDump();
	MPID_SBFlush();
	MPID_SBPrealloc();
	MPID_SBReleaseAvail();
	MPID_SBalloc();
	MPID_SBdestroy();
	MPID_SBfree();
	MPID_SBiAllocate();
	MPID_SBinit();
	MPID_SBrelease();
	MPID_SBvalid();
	MPIR_Ref_init();
	MPIR_Error();
	MPIR_Errors_are_fatal();
	MPIR_Errors_return();
	MPIR_Errors_warn();
	MPIR_Set_Status_error_array();
	MPIR_Datatype_iscontig();
	MPIR_Free_perm_type();
	MPIR_Free_struct_internals();
	MPIR_Type_dup();
	MPIR_Type_free();
	MPIR_Type_get_limits();
	MPIR_Type_permanent();
	MPIR_Errhandler_create();
	MPIR_Errhandler_mark();
	MPIR_Init();
	MPIR_Breakpoint();
	MPIR_cstr2fstr();
	MPIR_fstr2cstr();
	MPIR_Free_dtes();
	MPIR_Init_dtes();
	MPIR_Setup_base_datatype();
	MPIR_Setup_complex_datatype();
	MPIR_Type_contiguous();
	MPIR_GetErrorMessage();
	MPIR_GetNLSMsg();
	MPIR_Msg_queue_export();
	MPIR_HvectorLen();
	MPIR_Pack_Hvector();
	MPIR_UnPack_Hvector();
	MPIR_Elementcnt();
	MPIR_Pack2();
	MPIR_PrintDatatypePack();
	MPIR_PrintDatatypeUnpack();
	MPIR_Printcontig();
	MPIR_Printcontig2();
	MPIR_Printcontig2a();
	MPIR_Unpack();
	MPIR_Unpack2();
	MPIR_HBT_Free();
	MPIR_HBT_Init();
	MPIR_HBT_delete();
	MPIR_HBT_free_node();
	MPIR_HBT_free_subtree();
	MPIR_HBT_free_tree();
	MPIR_HBT_insert();
	MPIR_HBT_lookup();
	MPIR_HBT_new_node();
	MPIR_HBT_new_tree();
	MPIR_Tab();
	MPIR_dump_dte();
	MPIR_DestroyPointer();
	MPIR_DumpPointers();
	MPIR_FromPointer();
	MPIR_PointerOpts();
	MPIR_PointerPerm();
	MPIR_RegPointerIdx();
	MPIR_RmPointer();
	MPIR_ToPointer();
	MPIR_UsePointer();
// 	MPIR_BsendAlloc();
// 	MPIR_BsendCopyData();
//  	MPIR_BsendFreeReq();
 	MPIR_BsendInitBuffer();
// 	MPIR_BsendPersistent();
 	MPIR_BsendRelease();
	MPIR_IbsendDatatype();
// 	MPIR_MergeBlock();
	MPIR_Attr_copy();
	MPIR_Attr_copy_node();
	MPIR_Attr_copy_subtree();
	MPIR_Attr_create_tree();
	MPIR_Attr_dup_tree();
	MPIR_Attr_free_node();
	MPIR_Attr_free_subtree();
	MPIR_Attr_free_tree();
	MPIR_Attr_make_perm();
	MPIR_Keyval_create();
	MPIR_CreateGroup();
	MPIR_Dump_group();
	MPIR_Dump_ranges();
	MPIR_Dump_ranks();
	MPIR_FreeGroup();
	MPIR_Group_N2_prev();
	MPIR_Powers_of_2();
	MPIR_SetToIdentity();
	MPIR_Comm_N2_prev();
	MPIR_Comm_collops_init();
        MPIR_Comm_forget();
	MPIR_Comm_init();
	MPIR_Comm_make_coll();
	MPIR_Comm_remember();
	MPIR_Dump_comm();
	MPIR_Intercomm_high();
	MPIR_Sort_split_table();
	MPIR_Context_alloc();
	MPIR_Context_dealloc();
	MPIR_null_copy_fn();
	MPIR_null_delete_fn();
	MPIR_dup_fn();
	MPIR_BAND();
	MPIR_BOR();
	MPIR_BXOR();
	MPIR_LAND();
	MPIR_LOR();
	MPIR_LXOR();
	MPIR_MAXF();
	MPIR_MAXLOC();
	MPIR_MINF();
	MPIR_MINLOC();
	MPIR_PROD();
	MPIR_SUM();
	MPIR_Op_setup();
	MPIR_root();
	MPIR_Topology_Free();
	MPIR_Topology_Init();
	MPIR_Topology_copy_fn();
	MPIR_Topology_delete_fn();
	MPIR_Topology_finalize();
	MPIR_Topology_init();
#endif /* _HAVE_MPI_CH_P4 */
#if (MPI_SUBVERSION==1)
    /** in mpich 1.1.x this exists in libmpich.a also while in 1.2.x. it is in libmpe.a only. */
	MPE_GetHostName();
#endif
}
#endif // _CCAMPI

} // END extern c


#include <string>
#include <iostream>
void forceSTL() {
	using namespace std;
	void *x;
	x = (void *)0x80002400;
		::std::string s = "foo";
		::std::string s2 = s + s;
		cerr << "" << endl;
		cout << "" << endl;
		cout << 1 << endl;
		cout << 3.14159 << endl;
		cout << 4L << endl;
		clog << x << endl;
		clog << "" << endl;
}
